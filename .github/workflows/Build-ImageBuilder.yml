name: Build_ImageBuilder

on:
  workflow_dispatch:
    inputs:
      branch:
        description: |
          选择 OpenWrt 分支
        required: true
        default: "immortalwrt"
        type: choice
        options:
          - immortalwrt
          - openwrt
          
      image:
        description: |
          选择 imageBuilder 镜像
        required: true
        default: "x86-64"
        type: choice
        options:
          - x86-64
          - rockchip-armv8
          
      version:
        description: |
          选择 OpenWrt 版本
        required: true
        default: "24.10-SNAPSHOT"
        type: choice
        options:
          - "24.10-SNAPSHOT"
          - "24.10.2"
          - "24.10.1"
          - "24.10.0"
          - "23.05.5"
      
      profile:
        description: |
          输入 软路由型号 可选值如下：
        required: true
        default: 'x86-64'
        type: choice
        options:
          - x86-64
          - nanopi-r6s
          - orangepi-5plus
          
      rootfs_partsize:
        description: |
          设置软件包大小 单位(MB)
        required: true
        default: '1024'
        type: choice
        options:
          - 512
          - 1024
          - 2048
      
      network_lan:
        description: |
          设置固件IP地址
        required: true
        default: '10.10.10.10'
        type: choice
        options:
          - "10.10.10.254"
          - "10.10.10.10"
          - "192.168.100.1"
          
      docker:
        description: |
          是否编译 Docker 插件
        required: true
        default: false
        type: boolean
        
      enable_pppoe:
        description: |
          是否使用PPPoE协议?
        required: true
        default: true
        type: boolean
        
      pppoe_account:
        description: |
          是否添加 宽带账号? (可留空)
        required: false
      pppoe_password:
        description: |
          是否添加 宽带密码? (可留空)
        required: false

env:
  UPLOAD_BIN_DIR: false
  PATH_CACHE: /tmp/.cache
  CACHE_IMAGE: imagebuilder:${{ inputs.image }}-${{ inputs.version }}.tar

jobs:
  Build:
    name: Build ${{ inputs.branch }}-${{ inputs.version }}
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure docker image
        run: |
          if [[ "${{ inputs.version }}" =~ "SNAPSHOT" || "${{ inputs.branch }}" == "openwrt" ]]; then
            IMAGE=${{ inputs.image }}-${{ inputs.version }}
          else
            IMAGE=${{ inputs.image }}-openwrt-${{ inputs.version }}
          fi
          if [[ "${{ inputs.branch }}" == "openwrt" ]]; then
            echo "builder=/builder" >> $GITHUB_ENV
          else
            echo "builder=/home/build/immortalwrt" >> $GITHUB_ENV
          fi
          echo "IMAGE=${IMAGE}" >> $GITHUB_ENV
          echo "CACHE_KEY=${{ inputs.branch }}-${IMAGE}-$(echo "${IMAGE}" | md5sum | awk '{print $1}')" >> $GITHUB_ENV
          
      - name: Enable Cache
        uses: actions/cache@main
        with:
          path: ${{ env.PATH_CACHE }}
          key: ${{ env.CACHE_KEY }}
          
      - name: Configure environment variables
        run: |
          sudo timedatectl set-timezone "Asia/Shanghai"
          echo "time=$(date "+%Y.%m.%d-%H%M%S")" >> $GITHUB_ENV
          echo "profile=${{ inputs.profile }}" >> $GITHUB_ENV
          [[ "${{ inputs.image }}" =~ "x86-64"  ]] && echo "profile=x86-64" >> $GITHUB_ENV
          [[ "${{ inputs.image }}" =~ "armsr"  ]] && echo "profile=armsr-armv8" >> $GITHUB_ENV
          [[ "${{ inputs.image }}" =~ "armv8"  ]] && echo "arch=armv8" >> $GITHUB_ENV
          [[ "${{ inputs.image }}" =~ "x86-64"  ]] && echo "arch=x86-64" >> $GITHUB_ENV
          echo "device=$(echo ${{ inputs.image }} | sed 's/-openwrt//' | sed 's/-armv8//')" >> $GITHUB_ENV
             
      - name: Create Edit info
        run: |
          echo "## 编译时间：\`${{ env.time }}\`" > info.md
          echo "## [![Github](https://img.shields.io/badge/Release文件可在国内加速站下载-FC7C0D?logo=github&logoColor=fff&labelColor=000&style=for-the-badge)](https://ghproxy.net/)" >> info.md
          echo "## 固件信息：" >> info.md
          echo "* 固件版本 \`${{ inputs.version }}\`" >> info.md
          echo "* 固件地址 \`${{ inputs.network_lan }}\`" >> info.md
          echo "* 用户名 \`root\` 密码：无" >> info.md
          echo "* 默认软件包大小 \`${{ inputs.rootfs_partsize }}MB\`" >> info.md
          if [[ "${{ inputs.docker }}" == "true" ]]; then
            echo "* 添加\`docker\`版本" >> info.md
          fi
          
      - name: Set executable permissions
        run: chmod +x ${{ github.workspace }}/diy_make/${{ env.arch }}/make.sh
      
      - name: Check Docker images
        run: |
          mkdir -p ${{ env.PATH_CACHE }}/image
          if [[ -f "${{ env.PATH_CACHE }}/image/${{ env.CACHE_IMAGE }}" ]]; then
            echo -e "\e[1;32mImport Docker image：\e[0m"
            docker load --input \
            ${{ env.PATH_CACHE }}/image/${{ env.CACHE_IMAGE }}
          else
            docker pull ${{ inputs.branch }}/imagebuilder:${{ env.IMAGE }}
            echo -e "\e[1;32mExport the image to the cache directory\e[0m"
            docker save --output \
            ${{ env.PATH_CACHE }}/image/${{ env.CACHE_IMAGE }} \
            ${{ inputs.branch }}/imagebuilder:${{ env.IMAGE }}
          fi
          chmod -R 777 "${{ env.PATH_CACHE }}"
        
      - name: Building ${{ inputs.branch }} ${{ env.device }}
        id: building
        run: |
          docker run --rm -i \
            --user root \
            -v "${{ env.PATH_CACHE }}/dl:${{ env.builder }}/dl" \
            -v "${{ env.PATH_CACHE }}/packages:${{ env.builder }}/packages" \
            -v "${{ github.workspace }}/.github/.sh:${{ env.builder }}/SH" \
            -v "${{ github.workspace }}/diy_env:${{ env.builder }}/DIY_ENV" \
            -v "${{ github.workspace }}/${{ inputs.image }}/bin:${{ env.builder }}/bin" \
            -v "${{ github.workspace }}/diy_make/${{ env.arch }}/make.sh:${{ env.builder }}/make.sh" \
            -v "${{ github.workspace }}/diy_files/all:${{ env.builder }}/all" \
            -v "${{ github.workspace }}/diy_files/${{ env.arch }}/${{ env.profile }}:${{ env.builder }}/files" \
            -e PROFILES=${{ env.profile }} \
            -e BRANCH=${{ inputs.branch }} \
            -e VERSION=${{ inputs.version }} \
            -e INCLUDE_DOCKER=${{ inputs.docker }} \
            -e NETWORK_LAN=${{ inputs.network_lan }} \
            -e ENABLE_PPPOE=${{ inputs.enable_pppoe }} \
            -e PPPOE_ACCOUNT=${{ inputs.pppoe_account }} \
            -e PPPOE_PASSWORD=${{ inputs.pppoe_password }} \
            -e ROOTFS_PARTSIZE=${{ inputs.rootfs_partsize }} \
            ${{ inputs.branch }}/imagebuilder:${{ env.IMAGE }} /bin/bash ${{ env.builder }}/make.sh
          cat "${{ github.workspace }}/${{ inputs.image }}/bin/.bashrc" 2>/dev/null >> $GITHUB_OUTPUT
          #cat "${{ github.workspace }}/${{ inputs.image }}/bin/.bashrc" 2>/dev/null >> $GITHUB_ENV
          # exit 1
          
      - name: Upload bin directory
        uses: actions/upload-artifact@main
        if: steps.building.outputs.building == 'success' && env.UPLOAD_BIN_DIR == 'true'
        with:
          name: GitHub-Actions_${{ env.device }}
          path: ${{ env.PATH_CACHE }}/dl
      
      - name: Generate Firmware SHA-256
        if: steps.building.outputs.building == 'success'
        id: images
        run: |
          mkdir -p ${{ github.workspace }}/output && cd ${{ github.workspace }}/output
          find ${{ github.workspace }}/${{ inputs.image }}/bin/targets/ -type f -name "*.img.gz" -exec cp {} ${{ github.workspace }}/output \;
          cp ${{ github.workspace }}/${{ inputs.image }}/bin/*.conf ${{ github.workspace }}/output
          cp ${{ github.workspace }}/${{ inputs.image }}/bin/*.config ${{ github.workspace }}/output
          # cp ${{ github.workspace }}/${{ inputs.image }}/bin/targets/rockchip/armv8/*.img.gz ${{ github.workspace }}
          for file in *.img.gz; do
            sha256sum "$file" > "$file.sha256"
            sha256sum -c "$file.sha256"
          done
          echo "status=success" >> $GITHUB_OUTPUT
      
      - name: Query Cleanup Cache
        if: steps.building.outputs.cache == 'delete'
        run: |
          # List caches for current repository
          gh cache list
          # Delete a cache by key
          if [[ "$(gh cache list)" =~ "${{ env.CACHE_KEY }}"  ]]; then
            gh cache delete ${{ env.CACHE_KEY }}
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Reload again Cache
        if: steps.building.outputs.cache == 'delete'
        uses: actions/cache@main
        with:
          path: ${{ env.PATH_CACHE }}
          key: ${{ env.CACHE_KEY }}
          
      - name: Upload ${{ inputs.branch }} as release assets
        if: steps.images.outputs.status == 'success'
        uses: ncipollo/release-action@main
        with:
          tag: GitHub-Actions_${{ inputs.image }}-${{ env.profile }}
          name: ${{ inputs.branch }}_${{ env.profile }}
          artifacts: ${{ github.workspace }}/output/*
          allowUpdates: true
          removeArtifacts: false
          replacesArtifacts: true
          makeLatest: true
          token: ${{ secrets.GITHUB_TOKEN }}
          bodyFile: info.md